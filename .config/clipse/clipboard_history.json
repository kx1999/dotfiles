{"clipboardHistory":[{"value":"windowrulev2 = nodim,class:^(clipse)$","recorded":"2024-05-20 02:10:05.330463677","filePath":"null","pinned":false},{"value":"and layout plugin providing a scrolling layout like PaperWM ","recorded":"2024-05-20 02:09:23.309544177","filePath":"null","pinned":false},{"value":"History\nsrc\n\t\nInitial support for v0.40.0\n\t\nMay 11, 2024\nvideos\n\t\ncolumn rework\n\t\nApr 9, 2024\n.gitignore\n\t\n✨ init .gitignore\n\t\nMay 8, 2024\nCMakeLists.txt\n\t\nInitial support for Hyprland 0.37.1\n\t\nMar 31, 2024\nLICENSE\n\t\nInitial version\n\t\nMar 30, 2024\nMakefile\n\t\nInitial support for Hyprland 0.37.1\n\t\nMar 31, 2024\nREADME.md\n\t\nUpdate README for requirements\n\t\nMay 11, 2024\nflake.lock\n\t\n✨ init nix flake\n\t\nMay 8, 2024\nflake.nix\n\t\n✨ init nix flake\n\t\nMay 8, 2024\nhypr.conf\n\t\nChange how marks work\n\t\nMay 1, 2024\nhyprpm.toml\n\t\ncommit pin\n\t\nMay 11, 2024\nwaybar.conf\n\t\nInitial version\n\t\nMar 30, 2024\nRepository files navigation\n\nREADME\n\n    MIT license\n\nHyprscroller\n\nHyprscroller is a Hyprland layout plugin that creates a window layout similar to PaperWM. I initialy learned how to write a Hyprland plugin from hyprslidr, which is a similar idea.\n\nIntro\n\nThe plugin is quite feature complete and supports gaps, borders, special workspace, full screen modes, overview, marks and installation through hyprpm.\n\nI use hyprscroller on my main machine and will support it for as long as I keep on using Hyprland. However, I will only add new features that I find interesting, and support two Hyprland versions: the one my distribution uses, and the latest tagged one. I have found problematic compiling trunk versions of Hyprland on a system that already has a system-wide version of it installed, so I will not make an extra effort there until things improve in that front.\nRequirements\n\nhyprscroller supports the version of Hyprland I use, which should be the same as the Arch Linux hyprland package. You can try your luck with the latest git changes, but I will be slower to keep up with those, as there are too many API changes going on upstream.\n\nAside from those versions, even though the feature set will be frozen for them, hyprscroller also supports v0.35, v0.38.1 and v0.39.1.\nBuilding and installing\n\nWith Hyprland installed it should be as simple as running\n\n# builds a shared object hyprscroller.so\nmake all\n# installs the shared library in ~/.config/hypr/plugins\nmake install\n\nA more automated mode is to use hyprpm.\n\nhyprpm add https://github.com/dawsers/hyprscroller\n# verify it installed correctly\nhyprpm list\n\nYou can enable or disable it via hyprpm enable hyprscroller and hyprpm disable hyprscroller.\nConfiguration\n\nIf you are not using hyprpm, to make Hyprland load the plugin, add this to your configuration.\n\nplugin = ~/.config/hypr/plugins/hyprscroller.so\n\nInstead, if you use hyprpm, it should be as simple as adding this to your ~/.config/hypr/hyprland.conf :\n\nexec-once = hyprpm reload -n\n\nTo turn on the layout, use\n\ngeneral {\n    ...\n\n    layout = scroller\n\n    ...\n}\n\nDispatchers\n\nThe plugin adds the following dispatchers:\nDispatcher \tDescription\nscroller:movefocus \tA replacement for movefocus, takes a direction as argument.\nscroller:movewindow \tA replacement for movewindow, takes a direction as argument.\nscroller:setmode \tSet mode: r/row (default), c/col/column. Sets the working mode. Affects most dispatchers and new window creation.\nscroller:cyclesize \tResize the focused column width (row mode), or the active window height (column mode).\nscroller:alignwindow \tAlign window on the screen, l/left, c/center, r/right (row mode), c/center, u/up, d/down (col mode)\nscroller:admitwindow \tPush the current window below the active one of the column to its left.\nscroller:expelwindow \tPop the current window out of its column and place it on a new column to the right.\nscroller:fitsize \tResize columns (row mode) or windows (col mode) so they fit on the screen: active, visible, all, toend, tobeg\nscroller:toggleoverview \tToggle an overview of the workspace where all the windows are temporarily scaled to fit the monitor\nscroller:marksadd \tAdd a named mark. Argument is the name of the mark\nscroller:marksdelete \tDelete a named mark. Argument is the name of the mark\nscroller:marksvisit \tVisit a named mark. Argument is the name of the mark\nscroller:marksreset \tDelete all marks\nModes\n\nHyprscroller works in any of two modes that can be changed at any moment.\n\n    row mode: it is the default. It creates new windows in a new column. cyclesize affects the width of the active column. alignwindow aligns the active column according to the argument received. fitsize fits the selected columns to the width of the monitor.\n\n    column mode: It creates new windows in the current column, right below the active window. cyclesize affects the height of the active window. alignwindow aligns the active window within the column, according to the argument received. fitsize fits the selected windows in the column to the height of the monitor.\n\nWindow/Column Focus and Movement\n\nIf you want to use Hyprscroller you will need to map your key bindings from the default movefocus/movewindow to scroller:movefocus/scroller:movewindow. The reason is Hyprland doesn't have the concept (yet) of a workspace that spans more than the space of a monitor, and when focusing directionally, it doesn't look for windows that are \"outside\" of that region. If this changes in the future, these two dispatches may become obsolete.\n\nmovefocus and movewindow accept the following directional arguments: l or left, r or right, u or up, d or dn or down, b or begin or beginning, e or end. So you can focus or move windows/columns in a direction or to the beginning or end or the row.\nResizing\n\ncyclesize accepts an argument which is either +1/1/next, or -1/prev/previous. It cycles forward or backward through three column widths (in row mode): one third, one half or two thirds of the available width of the monitor. In column mode, the fractions are relative to the height of the monitor, and are: one third, one half, two thirds or one. However, using resizewindow, you can modify the width or height of any window freely.\nAligning\n\nColumns are generally aligned in automatic mode, always making the active one visible, and trying to make at least the previously focused one visible too if it fits the viewport, if not, the one adjacent on the other side. However, you can always align any column to the center, left or right of the monitor (in row mode), or up (top), down (bottom) or to the center in column mode. For example center a column for easier reading, regardless of what happens to the other columns. As soon as you change focus or move a column, the alignment is lost.\n\nalignwindow takes a parameter: l or left, r or right, c or center or centre, u or up and d or down.\n\nTo use right or left you need to be in row mode, and to use up or down in column mode. center behaves differently depending on the mode. In row mode it aligns the active column to the center of the monitor. In column mode, it aligns the active window within its column, to a centered position.\nAdmit/Expel\n\nYou can create columns of windows using admitwindow. It takes the active window and moves it to the column left of its current one, right under the active window in that column.\n\nTo expel any window from its current column and position it in a new column to its right, use expelwindow.\nFitting the Screen\n\nWhen you have a ultra-wide monitor, one in a vertical position, or the default column widths or window heights don't fit your workflow, you can use manual resizing, but it is sometimes slow and tricky.\n\nscroller:fitsize works in two different ways, depending on the active mode.\n\nIt allows you to re-fit the columns (row mode) or windows (column mode) you want to the screen extents. It accepts an argument related to the columns/windows it will try to fit. The new width/height of each column/window will be proportional to its previous width or height, relative to the other columns or windows affected.\n\n    active: It is similar to maximize, it will fit the active column/window.\n    visible: All the currently fully or partially visible columns/windows will be resized to fit the screen.\n    all: All the columns in the row or windows in the column will be resized to fit.\n    toend: All the columns or windows from the focused one to the end of the row/column will be affected.\n    tobeg or tobeginning: All the columns/windows from the focused one to the beginning of the row/column will now fit the screen.\n\nOverview\n\nscroller:toggleoverview toggles a bird's eye view of the current workspace where all the windows are scaled to fit the current monitor. You can still interact with them normally (change focus, move windows, type in them etc.). When toggling back to normal mode, the original window sizes will be restored...so it is not wise to use toggleoverview for window resizing or creating new windows. Use it as a way to see where things are and move the active focus, or a window, anything beyond that will probably find bugs or cause compositor crashes.\nMarks\n\nYou can use marks to navigate to frequently used windows, regardless of which workspace they are in (it even works for the special workspace windows).\n\nscroller:marksadd adds a named mark. Use a submap to create bindings for several named marks you may want to use. See the configuration example for directions.\n\nscroller:marksdelete deletes a named mark created with scroller:marksadd.\n\nscroller:marksvisit moves the focus to a previously created mark.\n\nscroller:marksreset clears all marks.\n\nMarks reference windows, but are global, they may belong to different workspaces, so visiting a mark may switch workspaces.\n\nYou can use any string name for a mark, for example in scripts. But they are also very convenient to use with regular key bindings by simply using a letter as the name. Again, see the example configuration.\nOptions\n\nhyprscroller currently accepts the following options:\n\n    column_default_width: determines the width of new columns in row mode. Possible arguments are: onehalf (default), onethird, twothirds, maximized, floating (uses the default width set by the application).\n\n    focus_wrap: determines whether focus will wrap when at the first or last window of a row/column. Possible arguments are: true|1 (default), or false|0.\n\nFor example:\n\nplugin {\n    scroller {\n        column_default_width = onehalf\n        focus_wrap = false\n    }\n}\n\nKey bindings\n\nAs an example, you could set some key bindings in your hyprland.conf like this:\n\n# Move focus with mainMod + arrow keys\nbind = $mainMod, left, scroller:movefocus, l\nbind = $mainMod, right, scroller:movefocus, r\nbind = $mainMod, up, scroller:movefocus, u\nbind = $mainMod, down, scroller:movefocus, d\nbind = $mainMod, home, scroller:movefocus, begin\nbind = $mainMod, end, scroller:movefocus, end\n\n# Movement\nbind = $mainMod CTRL, left, scroller:movewindow, l\nbind = $mainMod CTRL, right, scroller:movewindow, r\nbind = $mainMod CTRL, up, scroller:movewindow, u\nbind = $mainMod CTRL, down, scroller:movewindow, d\nbind = $mainMod CTRL, home, scroller:movewindow, begin\nbind = $mainMod CTRL, end, scroller:movewindow, end\n\n# Modes\nbind = $mainMod, bracketleft, scroller:setmode, row\nbind = $mainMod, bracketright, scroller:setmode, col\n\n# Sizing keys\nbind = $mainMod, equal, scroller:cyclesize, next\nbind = $mainMod, minus, scroller:cyclesize, prev\n\n# Admit/Expel\nbind = $mainMod, I, scroller:admitwindow,\nbind = $mainMod, O, scroller:expelwindow,\n\n# Center submap\n# will switch to a submap called center\nbind = $mainMod, C, submap, center\n# will start a submap called \"center\"\nsubmap = center\n# sets repeatable binds for resizing the active window\nbind = , C, scroller:alignwindow, c\nbind = , C, submap, reset\nbind = , right, scroller:alignwindow, r\nbind = , right, submap, reset\nbind = , left, scroller:alignwindow, l\nbind = , left, submap, reset\nbind = , up, scroller:alignwindow, u\nbind = , up, submap, reset\nbind = , down, scroller:alignwindow, d\nbind = , down, submap, reset\n# use reset to go back to the global submap\nbind = , escape, submap, reset\n# will reset the submap, meaning end the current one and return to the global one\nsubmap = reset\n\n# Resize submap\n# will switch to a submap called resize\nbind = $mainMod SHIFT, R, submap, resize\n# will start a submap called \"resize\"\nsubmap = resize\n# sets repeatable binds for resizing the active window\nbinde = , right, resizeactive, 100 0\nbinde = , left, resizeactive, -100 0\nbinde = , up, resizeactive, 0 -100\nbinde = , down, resizeactive, 0 100\n# use reset to go back to the global submap\nbind = , escape, submap, reset\n# will reset the submap, meaning end the current one and return to the global one\nsubmap = reset\n\n# Fit size submap\n# will switch to a submap called fitsize\nbind = $mainMod, W, submap, fitsize\n# will start a submap called \"fitsize\"\nsubmap = fitsize\n# sets binds for fitting columns/windows in the screen\nbind = , W, scroller:fitsize, visible\nbind = , W, submap, reset\nbind = , right, scroller:fitsize, toend\nbind = , right, submap, reset\nbind = , left, scroller:fitsize, tobeg\nbind = , left, submap, reset\nbind = , up, scroller:fitsize, active\nbind = , up, submap, reset\nbind = , down, scroller:fitsize, all\nbind = , down, submap, reset\n# use reset to go back to the global submap\nbind = , escape, submap, reset\n# will reset the submap, meaning end the current one and return to the global one\nsubmap = reset\n\n# overview keys\n# bind key to toggle overview (normal)\nbind = $mainMod, tab, scroller:toggleoverview\n# overview submap\n# will switch to a submap called overview\nbind = $mainMod, tab, submap, overview\n# will start a submap called \"overview\"\nsubmap = overview\nbind = , right, scroller:movefocus, right\nbind = , left, scroller:movefocus, left\nbind = , up, scroller:movefocus, up\nbind = , down, scroller:movefocus, down\n# use reset to go back to the global submap\nbind = , escape, scroller:toggleoverview,\nbind = , escape, submap, reset\nbind = , return, scroller:toggleoverview,\nbind = , return, submap, reset\nbind = $mainMod, tab, scroller:toggleoverview,\nbind = $mainMod, tab, submap, reset\n# will reset the submap, meaning end the current one and return to the global one\nsubmap = reset\n\n# Marks\nbind = $mainMod, M, submap, marksadd\nsubmap = marksadd\nbind = , a, scroller:marksadd, a\nbind = , a, submap, reset\nbind = , b, scroller:marksadd, b\nbind = , b, submap, reset\nbind = , c, scroller:marksadd, c\nbind = , c, submap, reset\nbind = , escape, submap, reset\nsubmap = reset\n\nbind = $mainMod SHIFT, M, submap, marksdelete\nsubmap = marksdelete\nbind = , a, scroller:marksdelete, a\nbind = , a, submap, reset\nbind = , b, scroller:marksdelete, b\nbind = , b, submap, reset\nbind = , c, scroller:marksdelete, c\nbind = , c, submap, reset\nbind = , escape, submap, reset\nsubmap = reset\n\nbind = $mainMod, apostrophe, submap, marksvisit\nsubmap = marksvisit\nbind = , a, scroller:marksvisit, a\nbind = , a, submap, reset\nbind = , b, scroller:marksvisit, b\nbind = , b, submap, reset\nbind = , c, scroller:marksvisit, c\nbind = , c, submap, reset\nbind = , escape, submap, reset\nsubmap = reset\n\nbind = $mainMod CTRL, M, scroller:marksreset\n\nAbout\n\nHyprland layout plugin providing a scrolling layout like PaperWM\nResources\nReadme\nLicense\nMIT license\nActivity\nStars\n43 stars\nWatchers\n2 watching\nForks\n3 forks\nReport repository\nReleases\nNo releases published\nPackages ","recorded":"2024-05-20 02:09:18.787341414","filePath":"null","pinned":false},{"value":"History\nsrc\n\t\nInitial support for v0.40.0\n\t\nMay 11, 2024\nvideos\n\t\ncolumn rework\n\t\nApr 9, 2024\n.gitignore\n\t\n✨ init .gitignore\n\t\nMay 8, 2024\nCMakeLists.txt\n\t\nInitial support for Hyprland 0.37.1\n\t\nMar 31, 2024\nLICENSE\n\t\nInitial version\n\t\nMar 30, 2024\nMakefile\n\t\nInitial support for Hyprland 0.37.1\n\t\nMar 31, 2024\nREADME.md\n\t\nUpdate README for requirements\n\t\nMay 11, 2024\nflake.lock\n\t\n✨ init nix flake\n\t\nMay 8, 2024\nflake.nix\n\t\n✨ init nix flake\n\t\nMay 8, 2024\nhypr.conf\n\t\nChange how marks work\n\t\nMay 1, 2024\nhyprpm.toml\n\t\ncommit pin\n\t\nMay 11, 2024\nwaybar.conf\n\t\nInitial version\n\t\nMar 30, 2024\nRepository files navigation\n\nREADME\n\n    MIT license\n\nHyprscroller\n\nHyprscroller is a Hyprland layout plugin that creates a window layout similar to PaperWM. I initialy learned how to write a Hyprland plugin from hyprslidr, which is a similar idea.\n\nIntro\n\nThe plugin is quite feature complete and supports gaps, borders, special workspace, full screen modes, overview, marks and installation through hyprpm.\n\nI use hyprscroller on my main machine and will support it for as long as I keep on using Hyprland. However, I will only add new features that I find interesting, and support two Hyprland versions: the one my distribution uses, and the latest tagged one. I have found problematic compiling trunk versions of Hyprland on a system that already has a system-wide version of it installed, so I will not make an extra effort there until things improve in that front.\nRequirements\n\nhyprscroller supports the version of Hyprland I use, which should be the same as the Arch Linux hyprland package. You can try your luck with the latest git changes, but I will be slower to keep up with those, as there are too many API changes going on upstream.\n\nAside from those versions, even though the feature set will be frozen for them, hyprscroller also supports v0.35, v0.38.1 and v0.39.1.\nBuilding and installing\n\nWith Hyprland installed it should be as simple as running\n\n# builds a shared object hyprscroller.so\nmake all\n# installs the shared library in ~/.config/hypr/plugins\nmake install\n\nA more automated mode is to use hyprpm.\n\nhyprpm add https://github.com/dawsers/hyprscroller\n# verify it installed correctly\nhyprpm list\n\nYou can enable or disable it via hyprpm enable hyprscroller and hyprpm disable hyprscroller.\nConfiguration\n\nIf you are not using hyprpm, to make Hyprland load the plugin, add this to your configuration.\n\nplugin = ~/.config/hypr/plugins/hyprscroller.so\n\nInstead, if you use hyprpm, it should be as simple as adding this to your ~/.config/hypr/hyprland.conf :\n\nexec-once = hyprpm reload -n\n\nTo turn on the layout, use\n\ngeneral {\n    ...\n\n    layout = scroller\n\n    ...\n}\n\nDispatchers\n\nThe plugin adds the following dispatchers:\nDispatcher \tDescription\nscroller:movefocus \tA replacement for movefocus, takes a direction as argument.\nscroller:movewindow \tA replacement for movewindow, takes a direction as argument.\nscroller:setmode \tSet mode: r/row (default), c/col/column. Sets the working mode. Affects most dispatchers and new window creation.\nscroller:cyclesize \tResize the focused column width (row mode), or the active window height (column mode).\nscroller:alignwindow \tAlign window on the screen, l/left, c/center, r/right (row mode), c/center, u/up, d/down (col mode)\nscroller:admitwindow \tPush the current window below the active one of the column to its left.\nscroller:expelwindow \tPop the current window out of its column and place it on a new column to the right.\nscroller:fitsize \tResize columns (row mode) or windows (col mode) so they fit on the screen: active, visible, all, toend, tobeg\nscroller:toggleoverview \tToggle an overview of the workspace where all the windows are temporarily scaled to fit the monitor\nscroller:marksadd \tAdd a named mark. Argument is the name of the mark\nscroller:marksdelete \tDelete a named mark. Argument is the name of the mark\nscroller:marksvisit \tVisit a named mark. Argument is the name of the mark\nscroller:marksreset \tDelete all marks\nModes\n\nHyprscroller works in any of two modes that can be changed at any moment.\n\n    row mode: it is the default. It creates new windows in a new column. cyclesize affects the width of the active column. alignwindow aligns the active column according to the argument received. fitsize fits the selected columns to the width of the monitor.\n\n    column mode: It creates new windows in the current column, right below the active window. cyclesize affects the height of the active window. alignwindow aligns the active window within the column, according to the argument received. fitsize fits the selected windows in the column to the height of the monitor.\n\nWindow/Column Focus and Movement\n\nIf you want to use Hyprscroller you will need to map your key bindings from the default movefocus/movewindow to scroller:movefocus/scroller:movewindow. The reason is Hyprland doesn't have the concept (yet) of a workspace that spans more than the space of a monitor, and when focusing directionally, it doesn't look for windows that are \"outside\" of that region. If this changes in the future, these two dispatches may become obsolete.\n\nmovefocus and movewindow accept the following directional arguments: l or left, r or right, u or up, d or dn or down, b or begin or beginning, e or end. So you can focus or move windows/columns in a direction or to the beginning or end or the row.\nResizing\n\ncyclesize accepts an argument which is either +1/1/next, or -1/prev/previous. It cycles forward or backward through three column widths (in row mode): one third, one half or two thirds of the available width of the monitor. In column mode, the fractions are relative to the height of the monitor, and are: one third, one half, two thirds or one. However, using resizewindow, you can modify the width or height of any window freely.\nAligning\n\nColumns are generally aligned in automatic mode, always making the active one visible, and trying to make at least the previously focused one visible too if it fits the viewport, if not, the one adjacent on the other side. However, you can always align any column to the center, left or right of the monitor (in row mode), or up (top), down (bottom) or to the center in column mode. For example center a column for easier reading, regardless of what happens to the other columns. As soon as you change focus or move a column, the alignment is lost.\n\nalignwindow takes a parameter: l or left, r or right, c or center or centre, u or up and d or down.\n\nTo use right or left you need to be in row mode, and to use up or down in column mode. center behaves differently depending on the mode. In row mode it aligns the active column to the center of the monitor. In column mode, it aligns the active window within its column, to a centered position.\nAdmit/Expel\n\nYou can create columns of windows using admitwindow. It takes the active window and moves it to the column left of its current one, right under the active window in that column.\n\nTo expel any window from its current column and position it in a new column to its right, use expelwindow.\nFitting the Screen\n\nWhen you have a ultra-wide monitor, one in a vertical position, or the default column widths or window heights don't fit your workflow, you can use manual resizing, but it is sometimes slow and tricky.\n\nscroller:fitsize works in two different ways, depending on the active mode.\n\nIt allows you to re-fit the columns (row mode) or windows (column mode) you want to the screen extents. It accepts an argument related to the columns/windows it will try to fit. The new width/height of each column/window will be proportional to its previous width or height, relative to the other columns or windows affected.\n\n    active: It is similar to maximize, it will fit the active column/window.\n    visible: All the currently fully or partially visible columns/windows will be resized to fit the screen.\n    all: All the columns in the row or windows in the column will be resized to fit.\n    toend: All the columns or windows from the focused one to the end of the row/column will be affected.\n    tobeg or tobeginning: All the columns/windows from the focused one to the beginning of the row/column will now fit the screen.\n\nOverview\n\nscroller:toggleoverview toggles a bird's eye view of the current workspace where all the windows are scaled to fit the current monitor. You can still interact with them normally (change focus, move windows, type in them etc.). When toggling back to normal mode, the original window sizes will be restored...so it is not wise to use toggleoverview for window resizing or creating new windows. Use it as a way to see where things are and move the active focus, or a window, anything beyond that will probably find bugs or cause compositor crashes.\nMarks\n\nYou can use marks to navigate to frequently used windows, regardless of which workspace they are in (it even works for the special workspace windows).\n\nscroller:marksadd adds a named mark. Use a submap to create bindings for several named marks you may want to use. See the configuration example for directions.\n\nscroller:marksdelete deletes a named mark created with scroller:marksadd.\n\nscroller:marksvisit moves the focus to a previously created mark.\n\nscroller:marksreset clears all marks.\n\nMarks reference windows, but are global, they may belong to different workspaces, so visiting a mark may switch workspaces.\n\nYou can use any string name for a mark, for example in scripts. But they are also very convenient to use with regular key bindings by simply using a letter as the name. Again, see the example configuration.\nOptions\n\nhyprscroller currently accepts the following options:\n\n    column_default_width: determines the width of new columns in row mode. Possible arguments are: onehalf (default), onethird, twothirds, maximized, floating (uses the default width set by the application).\n\n    focus_wrap: determines whether focus will wrap when at the first or last window of a row/column. Possible arguments are: true|1 (default), or false|0.\n\nFor example:\n\nplugin {\n    scroller {\n        column_default_width = onehalf\n        focus_wrap = false\n    }\n}\n\nKey bindings\n\nAs an example, you could set some key bindings in your hyprland.conf like this:\n\n# Move focus with mainMod + arrow keys\nbind = $mainMod, left, scroller:movefocus, l\nbind = $mainMod, right, scroller:movefocus, r\nbind = $mainMod, up, scroller:movefocus, u\nbind = $mainMod, down, scroller:movefocus, d\nbind = $mainMod, home, scroller:movefocus, begin\nbind = $mainMod, end, scroller:movefocus, end\n\n# Movement\nbind = $mainMod CTRL, left, scroller:movewindow, l\nbind = $mainMod CTRL, right, scroller:movewindow, r\nbind = $mainMod CTRL, up, scroller:movewindow, u\nbind = $mainMod CTRL, down, scroller:movewindow, d\nbind = $mainMod CTRL, home, scroller:movewindow, begin\nbind = $mainMod CTRL, end, scroller:movewindow, end\n\n# Modes\nbind = $mainMod, bracketleft, scroller:setmode, row\nbind = $mainMod, bracketright, scroller:setmode, col\n\n# Sizing keys\nbind = $mainMod, equal, scroller:cyclesize, next\nbind = $mainMod, minus, scroller:cyclesize, prev\n\n# Admit/Expel\nbind = $mainMod, I, scroller:admitwindow,\nbind = $mainMod, O, scroller:expelwindow,\n\n# Center submap\n# will switch to a submap called center\nbind = $mainMod, C, submap, center\n# will start a submap called \"center\"\nsubmap = center\n# sets repeatable binds for resizing the active window\nbind = , C, scroller:alignwindow, c\nbind = , C, submap, reset\nbind = , right, scroller:alignwindow, r\nbind = , right, submap, reset\nbind = , left, scroller:alignwindow, l\nbind = , left, submap, reset\nbind = , up, scroller:alignwindow, u\nbind = , up, submap, reset\nbind = , down, scroller:alignwindow, d\nbind = , down, submap, reset\n# use reset to go back to the global submap\nbind = , escape, submap, reset\n# will reset the submap, meaning end the current one and return to the global one\nsubmap = reset\n\n# Resize submap\n# will switch to a submap called resize\nbind = $mainMod SHIFT, R, submap, resize\n# will start a submap called \"resize\"\nsubmap = resize\n# sets repeatable binds for resizing the active window\nbinde = , right, resizeactive, 100 0\nbinde = , left, resizeactive, -100 0\nbinde = , up, resizeactive, 0 -100\nbinde = , down, resizeactive, 0 100\n# use reset to go back to the global submap\nbind = , escape, submap, reset\n# will reset the submap, meaning end the current one and return to the global one\nsubmap = reset\n\n# Fit size submap\n# will switch to a submap called fitsize\nbind = $mainMod, W, submap, fitsize\n# will start a submap called \"fitsize\"\nsubmap = fitsize\n# sets binds for fitting columns/windows in the screen\nbind = , W, scroller:fitsize, visible\nbind = , W, submap, reset\nbind = , right, scroller:fitsize, toend\nbind = , right, submap, reset\nbind = , left, scroller:fitsize, tobeg\nbind = , left, submap, reset\nbind = , up, scroller:fitsize, active\nbind = , up, submap, reset\nbind = , down, scroller:fitsize, all\nbind = , down, submap, reset\n# use reset to go back to the global submap\nbind = , escape, submap, reset\n# will reset the submap, meaning end the current one and return to the global one\nsubmap = reset\n\n# overview keys\n# bind key to toggle overview (normal)\nbind = $mainMod, tab, scroller:toggleoverview\n# overview submap\n# will switch to a submap called overview\nbind = $mainMod, tab, submap, overview\n# will start a submap called \"overview\"\nsubmap = overview\nbind = , right, scroller:movefocus, right\nbind = , left, scroller:movefocus, left\nbind = , up, scroller:movefocus, up\nbind = , down, scroller:movefocus, down\n# use reset to go back to the global submap\nbind = , escape, scroller:toggleoverview,\nbind = , escape, submap, reset\nbind = , return, scroller:toggleoverview,\nbind = , return, submap, reset\nbind = $mainMod, tab, scroller:toggleoverview,\nbind = $mainMod, tab, submap, reset\n# will reset the submap, meaning end the current one and return to the global one\nsubmap = reset\n\n# Marks\nbind = $mainMod, M, submap, marksadd\nsubmap = marksadd\nbind = , a, scroller:marksadd, a\nbind = , a, submap, reset\nbind = , b, scroller:marksadd, b\nbind = , b, submap, reset\nbind = , c, scroller:marksadd, c\nbind = , c, submap, reset\nbind = , escape, submap, reset\nsubmap = reset\n\nbind = $mainMod SHIFT, M, submap, marksdelete\nsubmap = marksdelete\nbind = , a, scroller:marksdelete, a\nbind = , a, submap, reset\nbind = , b, scroller:marksdelete, b\nbind = , b, submap, reset\nbind = , c, scroller:marksdelete, c\nbind = , c, submap, reset\nbind = , escape, submap, reset\nsubmap = reset\n\nbind = $mainMod, apostrophe, submap, marksvisit\nsubmap = marksvisit\nbind = , a, scroller:marksvisit, a\nbind = , a, submap, reset\nbind = , b, scroller:marksvisit, b\nbind = , b, submap, reset\nbind = , c, scroller:marksvisit, c\nbind = , c, submap, reset\nbind = , escape, submap, reset\nsubmap = reset\n\nbind = $mainMod CTRL, M, scroller:marksreset\n\nAbout\n\nHyprland layout plugin providing a scrolling layout like PaperWM\nResources\nReadme\nLicense\nMIT license\nActivity\nStars\n43 stars\nWatchers\n2 watching\nForks\n3 forks\nReport repository\nReleases\nNo releases published\nPackages\nNo packages published\nContributors 2\n\n    @dawsers\n    dawsers\n    @howyay\n    howyay\n\nLanguages\n\nC++ 95.3%\nNix 2.9%\nOther 1.8%","recorded":"2024-05-20 02:09:17.210212259","filePath":"null","pinned":false},{"value":"67951273849","recorded":"2024-05-20 02:09:08.110000628","filePath":"null","pinned":false},{"value":"bhuquywfplyulgl","recorded":"2024-05-20 02:09:04.232272635","filePath":"null","pinned":false},{"value":"sitenienarstenaiernft","recorded":"2024-05-20 02:09:01.296159066","filePath":"null","pinned":false},{"value":"Don Juan\nOWNER\n — 05/04/2024 4:12 AM\nrustdesk:\naBcdefg6 \nImage","recorded":"2024-05-20 02:08:27.816688499","filePath":"null","pinned":false},{"value":"📷 682873.png","recorded":"2024-05-20 02:08:21.327222764","filePath":"/home/kyle/.config/clipse/tmp_files/682873.png","pinned":false},{"value":"📷 95857.png","recorded":"2024-05-20 02:08:16.768599366","filePath":"/home/kyle/.config/clipse/tmp_files/95857.png","pinned":false},{"value":"xample: echo \"some data\" | clipse -a\n\nclipse -c \u003carg\u003e       # Copy the \u003carg\u003e to the system clipboard (string). This also adds to clipboard history if currently listening. \n\nclipse -c             # Copies any standard input directly to the system clipboard.\n\n                      # For example: echo \"some data\" | clipse -c\n\nclipse -p             # Prints the current clipboard content to the console. \n\n                      # Example: clipse -p \u003e file.txt\n\n# TUI management commands\n\nclipse -fc $PPID      # Open Clipboard TUI in 'force kill' mode \n\nclipse -listen        # Run a background listener process\n\nclipse --listen-shell # Run a listener process in the current terminal (useful for debugging)\n\nclipse -help          # Display menu option\n\nclipse -v             # Get version\n\nclipse -clear         # Wipe all clipboard history and current system clipboard value\n\nclipse keep           # Keep the TUI open after selecting an item to copy (useful for debugging)\n\nclipse -kill          # Kill any existing background processes\n\nclipse                # Open Clipboard TUI in persistent/debug mode\n\n","recorded":"2024-05-20 02:07:55.738072876","filePath":"null","pinned":false},{"value":"holds them. Thus, a file config.json at location $HOME/.config/clipse/config.json will have all relative paths defined in it relative to its directory of $HOME/.config/clipse/.\n\nAbsolute paths starting with /, paths relative to the user home dir using ~, or any environment variables like $HOME and $XDG_CONFIG_HOME are also valid paths that can be used in this f","recorded":"2024-05-20 02:07:53.521425137","filePath":"null","pinned":false}]}
